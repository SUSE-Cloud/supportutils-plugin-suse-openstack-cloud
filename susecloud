#!/bin/bash
#############################################################
# Name:        Supportconfig Plugin for SUSE Cloud
# Description: Gathers important troubleshooting information
#              about SUSE Cloud
# License:     GPLv2
# Author:      Matt Barringer <mbarringer@suse.de>
# Modified:    2012 August 29
#############################################################

SVER=1.0.0
RCFILE="/usr/lib/supportconfig/resources/scplugin.rc"
LOG_LINES=500  # 0 means include the entire file

[ -s $RCFILE ] && . $RCFILE || { echo "ERROR: Initializing resource file: $RCFILE"; exit 1; }

validate_rpm_if_installed() {
        THISRPM=$1
        echo "#==[ Validating RPM ]=================================#"
        if rpm -q $THISRPM >/dev/null 2>&1; then
                echo "# rpm -V $THISRPM"
        
                if rpm -V $THISRPM; then
                        echo "Status: Passed"
                else
                        echo "Status: WARNING"
                fi
        else
                echo "package $THISRPM is not installed"
                echo "Status: Skipped"
        fi
        echo
}

#############################################################
section_header "Supportconfig Plugin for SUSE Cloud, v${SVER}"
# The plugin already hardcodes a reference to this directory above, so we're
# not introducing a new coupling with .spec files by using this absolute path here.
for THISRPM in $(cat "/usr/lib/supportconfig/resources/susecloud-rpm-list"); do
        validate_rpm_if_installed $THISRPM
done

find_and_pconf_files () {
        [ -d "$1" ] || return 0
        FILES=$(find "$@" ! -name \*.gz ! -name \*.bz2)
        if [ -n "$FILES" ]; then
                pconf_files $FILES
        fi
}

find_and_plog_files () {
        [ -d "$1" ] || return 0
        FILES=$(find "$@" ! -name \*.gz ! -name \*.bz2)
        if [ -n "$FILES" ]; then
                plog_files $LOG_LINES $FILES
        fi
}

#############################################################
section_header "Crowbar"

pconf_files \
	/etc/crowbar.install.key \
	/tmp/bc-template-dns.json \
	/opt/dell/chef/data_bags/crowbar/bc-template-*.json \
	/var/chef/cache/chef-stacktrace.out
find_and_pconf_files /etc/crowbar                         -type f
find_and_plog_files  /opt/dell/crowbar_framework/log      -type f
find_and_plog_files  /var/log/nodes                       -type f
find_and_plog_files  /var/log/barclamps                   -type f
find_and_plog_files  /var/log -path /var/log/crowbar\*    -type f
find_and_plog_files  /var/log/apache2                     -type f
find_and_plog_files  /var/log/crowbar                     -type f
plugin_tag "admin node PXE / TFTP configuration"
find                 /srv/tftpboot/discovery/pxelinux.cfg -ls
echo; echo
find_and_pconf_files /srv/tftpboot/discovery/pxelinux.cfg -type f

#############################################################
section_header "Chef"

# Don't capture private keys/certificates, just show the inode info
[ -d /etc/chef ] && find /etc/chef -type f -name \*.pem -ls
echo; echo
find_and_pconf_files /etc/chef       -type f  ! -name \*.pem

find_and_plog_files  /var/log/chef   -type f
find_and_plog_files  /root           -name screenlog.\*

#############################################################
section_header "Ceph config"

[ -d /etc/ceph ] && FILES=$(find /etc/ceph -type f | egrep -v '(/monmap|\.keyring)$') || FILES=""
if [ -n "$FILES" ]; then
        pconf_files $FILES
fi

#############################################################
section_header "Ceph monmap"

if [ -e /etc/ceph/monmap ]; then
        monmaptool --print /etc/ceph/monmap
else
        echo "/etc/ceph/monmap did not exist"
fi

#############################################################
section_header "Ceph log files"

find_and_plog_files /var/log/ceph -type f

#############################################################
section_header "OpenStack"

for svc in keystone rabbitmq glance swift nova cinder quantum heat ceilometer; do
        find_and_plog_files /var/log/$svc -type f
done
